<#@ include file=".\CslTreeGenerator.t4" #>
<#+
GeneratedCslNodeClass[] CslTreeClasses = new GeneratedCslNodeClass[]
{    
    new GeneratedCslNodeClass
    {
        Name = "DirectiveBlock",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "DirectiveBlock",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "DirectiveToken", Type = "SyntaxToken", Completion="None"},
            new GeneratedProperty { Name = "SkippedTokens", Type = "SyntaxList<SyntaxToken>", Completion="None"},
            new GeneratedProperty { Name = "EndOfText", Type = "SyntaxToken", Optional=true, Completion="None" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "SkippedTokens",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "SkippedTokens",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Tokens", Type = "SyntaxList<SyntaxToken>", Completion="None"},
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "QueryBlock",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "QueryBlock",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Statements", Type = "SyntaxList<SeparatedElement<Statement>>", Completion="Tabular"},
            new GeneratedProperty { Name = "SkippedTokens", Type = "SkippedTokens", Optional=true, Completion="None"},
            new GeneratedProperty { Name = "EndOfQuery", Type = "SyntaxToken", Optional=true, Completion="None" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "Expression",
        Doc = "A node in the Kusto syntax that represents an expression",
        Base = "SyntaxNode",
        Abstract = true,
        Properties = new GeneratedProperty[]
        {
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "Clause",
        Doc = "A node in the Kusto syntax that represents a clause",
        Base = "SyntaxNode",
        Abstract = true,
        Properties = new GeneratedProperty[]
        {
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "TypeOfLiteralExpression",
        Doc = "A node in the Kusto syntax that represents a typeof expression",
        Base = "Expression",
        Sealed = true,
        Kind = "TypeOfLiteralExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "TypeOfKeyword", Type = "SyntaxToken", Completion="None" },
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Types", Type = "SyntaxList<SeparatedElement<Expression>>", Completion="Declaration" },
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Completion="Syntax" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "QueryOperator",
        Doc = "A node in the Kusto syntax that represents a query operator",
        Base = "Expression",
        Abstract = true,
        Properties = new GeneratedProperty[]
        {
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "BadQueryOperator",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "BadQueryOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Keyword", Type = "SyntaxToken" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "Statement",
        Doc = "A node in the Kusto syntax that represents a statement.",
        Base = "SyntaxNode",
        Abstract = true,
        Properties = new GeneratedProperty[]
        {
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "CompoundStringLiteralExpression",
        Doc = "A node in the kusto syntax that name expression.",
        Base = "Expression",
        Sealed = true,
        Kind = "CompoundStringLiteralExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Tokens", Type = "SyntaxList<SyntaxToken>", Doc = "One or more tokens that comprise the string literal value."}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "Name",
        Doc = "A node in the Kusto syntax that represents a name.",
        Base = "SyntaxNode",
        Abstract = true,
        Properties = new GeneratedProperty[]
        {
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "TokenName",
        Doc = "A node in the kusto syntax that represents a single identifier name.",
        Base = "Name",
        Sealed = true,
        Kind = "TokenName",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Name", Type = "SyntaxToken", Doc = "The token that is the name."}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "BracketedName",
        Doc = "A node in the kusto syntax that represents a bracketed name.",
        Base = "Name",
        Sealed = true,
        Kind = "BracketedName",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "OpenBracket", Type = "SyntaxToken", Doc = "The open bracket token.", Completion="Syntax"},
            new GeneratedProperty { Name = "Name", Type = "Expression", Doc = "The string literal expression that comprises the name.", Completion="Literal"},
            new GeneratedProperty { Name = "CloseBracket", Type = "SyntaxToken", Doc = "The close bracket token.", Completion="Syntax"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "BracedName",
        Doc = "A node in the kusto syntax that represents a client parameter.",
        Base = "Name",
        Sealed = true,
        Kind = "BracedName",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "OpenBrace", Type = "SyntaxToken"},
            new GeneratedProperty { Name = "Name", Type = "SyntaxToken"},
            new GeneratedProperty { Name = "CloseBrace", Type = "SyntaxToken"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "WildcardedName",
        Doc = "",
        Base = "Name",
        Sealed = true,
        Kind = "WildcardedName",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Pattern", Type = "SyntaxToken", Completion="Syntax"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "BracketedWildcardedName",
        Doc = "",
        Base = "Name",
        Sealed = true,
        Kind = "BracketedWildcardedName",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "OpenBracket", Type = "SyntaxToken", Doc = "The open bracket token.", Completion="Syntax"},
            new GeneratedProperty { Name = "Pattern", Type = "SyntaxToken", Completion="Syntax"},
            new GeneratedProperty { Name = "CloseBracket", Type = "SyntaxToken", Doc = "The close bracket token.", Completion="Syntax"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "NameDeclaration",
        Doc = "A node in the Kusto syntax that represents a name declaration.",
        Base = "Expression",
        Sealed = true,
        Kind = "NameDeclaration",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Name", Type = "Name", Doc = "The table name"},
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "NameReference",
        Doc = "A node in the Kusto syntax that represents a name reference.",
        Base = "Expression",
        Sealed = true,
        Kind = "NameReference",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Name", Type = "Name", Doc = "The table name"},
            new GeneratedProperty { Name = "Match", Type = "Kusto.Language.Symbols.SymbolMatch", IsSyntax=false }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "LiteralExpression",
        Doc = "A node in the kusto syntax that represents a literal expression.",
        Base = "Expression",
        Sealed = true,
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Token", Type = "SyntaxToken", Doc = "The token with the literal value.", Completion="Literal"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "StarExpression",
        Doc = "A node in the kusto syntax that represents an expression comprised of a single token.",
        Base = "Expression",
        Sealed = true,
        Kind = "StarExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "AsteriskToken", Type = "SyntaxToken", Doc = "The token.", Completion="Syntax"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "AtExpression",
        Doc = "A node in the kusto syntax that represents an expression comprised of a single token.",
        Base = "Expression",
        Sealed = true,
        Kind = "AtExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "AtToken", Type = "SyntaxToken", Doc = "The token.", Completion="Syntax"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "JsonExpression",
        Doc = "A node in the Kusto syntax that represents a json expression",
        Base = "Expression",
        Abstract = true,
        Properties = new GeneratedProperty[]
        {
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "JsonPair",
        Doc = "A node in the kusto syntax that represents a JSON scalar expression.",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "JsonPair",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Name", Type = "SyntaxToken", Doc = "The token with the name of the JSON element.", Completion="Declaration"},
            new GeneratedProperty { Name = "Colon", Type = "SyntaxToken", Doc = "The colon token.", Completion="Syntax"},
            new GeneratedProperty { Name = "Value", Type = "Expression", Doc = "The value of the JSON element.", Completion="Literal"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "JsonObjectExpression",
        Doc = "A node in the kusto syntax that represents a JSON object expression.",
        Base = "JsonExpression",
        Sealed = true,
        Kind = "JsonObjectExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "OpenBrace", Type = "SyntaxToken", Doc = "The open brace token.", Completion="Syntax"},
            new GeneratedProperty { Name = "Pairs", Type = "SyntaxList<SeparatedElement<JsonPair>>", Doc = "The list of name value pairs.", Completion="Syntax"},
            new GeneratedProperty { Name = "CloseBrace", Type = "SyntaxToken", Doc = "The close brace token.", Completion="Syntax"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "JsonArrayExpression",
        Doc = "A node in the kusto syntax that represents a JSON array expression.",
        Base = "JsonExpression",
        Sealed = true,
        Kind = "JsonArrayExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "OpenBracket", Type = "SyntaxToken", Doc = "The open bracket token.", Completion="Syntax"},
            new GeneratedProperty { Name = "Values", Type = "SyntaxList<SeparatedElement<Expression>>", Doc = "The list of values.", Completion="Literal"},
            new GeneratedProperty { Name = "CloseBracket", Type = "SyntaxToken", Doc = "The close bracket token.", Completion="Syntax"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "DynamicExpression",
        Doc = "A node in the kusto syntax that represents a dynamic expression.",
        Base = "Expression",
        Sealed = true,
        Kind = "DynamicExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Dynamic", Type = "SyntaxToken", Doc = "The dynamic keyword.", Completion="Keyword"},
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Doc = "The open bracket token.", Completion="Syntax"},
            new GeneratedProperty { Name = "Expression", Type = "Expression", Doc = "The body of the dynamic expression.", Completion="Syntax"},
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Doc = "The close bracket token.", Completion="Syntax"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ParenthesizedExpression",
        Doc = "A node in the kusto syntax that represents a parenthesized expression.",
        Base = "Expression",
        Sealed = true,
        Kind = "ParenthesizedExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Doc = "The open parenthesis token.", Completion="Syntax"},
            new GeneratedProperty { Name = "Expression", Type = "Expression", Doc = "The parenthesized expression."},
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Doc = "The close parenthesis token.", Completion="Syntax"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ExpressionList",
        Doc = "A node in the kusto syntax that represents a parenthesized list of expressions.",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "ExpressionList",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Doc = "The open parenthesis token.", Completion="Syntax"},
            new GeneratedProperty { Name = "Expressions", Type = "SyntaxList<SeparatedElement<Expression>>", Doc = "The list of expressions.", Completion="Scalar"},
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Doc = "The close parenthesis token.", Completion="Syntax"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ExpressionCouple",
        Doc = "A node in the kusto syntax that represents a parenthesized pair of expressions.",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "ExpressionCouple",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Doc = "The open parenthesis token.", Completion="Syntax"},
            new GeneratedProperty { Name = "First", Type = "Expression", Doc = "The first expression.", Completion="Scalar"},
            new GeneratedProperty { Name = "DotDot", Type = "SyntaxToken", Doc = "The .. token.", Completion="Syntax"},
            new GeneratedProperty { Name = "Second", Type = "Expression", Doc = "The second expression.", Completion="Scalar"},
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Doc = "The close parenthesis token.", Completion="Syntax"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "PrefixUnaryExpression",
        Doc = "A node in the kusto syntax that represents a prefix unary expression.",
        Base = "Expression",
        Sealed = true,
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Operator", Type = "SyntaxToken", Doc = "The operator token.", Completion="Syntax"},
            new GeneratedProperty { Name = "Expression", Type = "Expression", Doc = "The expression."}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "BinaryExpression",
        Doc = "A node in the kusto syntax that represents a binary expression.",
        Base = "Expression",
        Sealed = true,
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Left", Type = "Expression", Doc = "The left side expression."},
            new GeneratedProperty { Name = "Operator", Type = "SyntaxToken", Doc = "The operator token.", Completion="Syntax"},
            new GeneratedProperty { Name = "Right", Type = "Expression", Doc = "The right side expression."}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "InExpression",
        Doc = "A node in the kusto syntax that represents an in expression.",
        Base = "Expression",
        Sealed = true,
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Left", Type = "Expression", Doc = "The left side expression."},
            new GeneratedProperty { Name = "Operator", Type = "SyntaxToken", Doc = "The in or !in keyword.", Completion="Syntax"},
            new GeneratedProperty { Name = "Right", Type = "ExpressionList", Doc = "The list of expressions.", Completion="Syntax"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "HasAnyExpression",
        Doc = "A node in the kusto syntax that represents a has_any expression.",
        Base = "Expression",
        Sealed = true,
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Left", Type = "Expression", Doc = "The left side expression."},
            new GeneratedProperty { Name = "Operator", Type = "SyntaxToken", Doc = "The has_any keyword.", Completion="Syntax"},
            new GeneratedProperty { Name = "Right", Type = "ExpressionList", Doc = "The list of expressions.", Completion="Syntax"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "BetweenExpression",
        Doc = "A node in the kusto syntax that represents a between expression.",
        Base = "Expression",
        Sealed = true,
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Left", Type = "Expression", Doc = "The left side expression."},
            new GeneratedProperty { Name = "Operator", Type = "SyntaxToken", Doc = "The between or !between keyword.", Completion="Syntax"},
            new GeneratedProperty { Name = "Right", Type = "ExpressionCouple", Doc = "The list of expressions."}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "FunctionCallExpression",
        Doc = "A node in the kusto syntax that represents a function call expression.",
        Base = "Expression",
        Sealed = true,
        Kind = "FunctionCallExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Name", Type = "NameReference", Doc = "The name of the function call.", Completion="Declaration"},
            new GeneratedProperty { Name = "ArgumentList", Type = "ExpressionList", Doc = "The arguments", Completion="Syntax"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ToScalarExpression",
        Doc = "A node in the Kusto syntax that represents the toscalar operation.",
        Base = "Expression",
        Sealed = true,
        Kind = "ToScalarExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "ToScalar", Type = "SyntaxToken" },
            new GeneratedProperty { Name = "KindParameter", Type="NamedParameter", Optional=true, Completion="Clause" },
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Completion="Syntax"},
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Tabular" },
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Completion="Syntax"},
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ToTableExpression",
        Doc = "A node in the Kusto syntax that represents the totable operation.",
        Base = "Expression",
        Sealed = true,
        Kind = "ToTableExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "ToTable", Type = "SyntaxToken" },
            new GeneratedProperty { Name = "KindParameter", Type="NamedParameter", Optional=true, Completion="Clause" },
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Completion="Syntax"},
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Tabular" },
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Completion="Syntax"},
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "MaterializedViewCombineExpression",
        Doc = "A node in the Kusto syntax that represents the materilized-view-combine expression.",
        Base = "Expression",
        Sealed = true,
        Kind = "MaterializedViewCombineExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "MaterializedViewCombineKeyword", Type="SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "ViewName", Type="MaterializedViewCombineNameClause", Completion="Syntax" },
            new GeneratedProperty { Name = "BaseClause", Type="MaterializedViewCombineClause", Completion="Syntax" },
            new GeneratedProperty { Name = "DeltaClause", Type="MaterializedViewCombineClause", Completion="Syntax" },
            new GeneratedProperty { Name = "AggregationsClause", Type="MaterializedViewCombineClause", Completion="Syntax" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "MaterializedViewCombineNameClause",
        Doc = "A node in the Kusto syntax that represents the materilized-view-combine view name part.",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "MaterializedViewCombineExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Value", Type = "Expression", Completion="Literal"},
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Completion="Syntax" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "MaterializedViewCombineClause",
        Doc = "A node in the Kusto syntax that represents the materilized-view-combine clause.",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "MaterializedViewCombineClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Keyword", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Syntax"},
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Completion="Syntax" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "NamedExpression",
        Doc = "A node in the Kusto syntax that represents a named expression.",
        Base = "Expression",
        Abstract = true,
        Properties = new GeneratedProperty[]
        {
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "SimpleNamedExpression",
        Doc = "A node in the kusto syntax that represents a named expression.",
        Base = "NamedExpression",
        Sealed = true,
        Kind = "SimpleNamedExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Name", Type = "NameDeclaration", Doc = "The name of the expression.", Completion="Declaration"},
            new GeneratedProperty { Name = "EqualToken", Type = "SyntaxToken", Doc = "The equal token.", Completion="Syntax" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Doc = "The named expression."}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "RenameList",
        Doc = "A node in the kusto syntax that represents a parenthesized list of names.",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "RenameList",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Doc = "The open parenthesis token.", Completion="Syntax"},
            new GeneratedProperty { Name = "Names", Type = "SyntaxList<SeparatedElement<NameDeclaration>>", Doc = "The list of name declarations.", Completion="Declaration"},
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Doc = "The close parenthesis token.", Completion="Syntax"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "CompoundNamedExpression",
        Doc = "A node in the kusto syntax that represents a compound named expression.",
        Base = "NamedExpression",
        Sealed = true,
        Kind = "CompoundNamedExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Names", Type = "RenameList", Doc = "The set of names or keywords.", Completion="Syntax"},
            new GeneratedProperty { Name = "EqualToken", Type = "SyntaxToken", Doc = "The equal token.", Completion="Syntax" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Doc = "The named expression.", Completion="Scalar"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "BracketedExpression",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "BracketedExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "OpenBracket", Type = "SyntaxToken", Completion="Syntax"},
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Literal"},
            new GeneratedProperty { Name = "CloseBracket", Type = "SyntaxToken", Completion="Syntax" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "PathExpression",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "PathExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Expression", Type = "Expression"},
            new GeneratedProperty { Name = "Dot", Type = "SyntaxToken", Optional = true, Completion="Syntax"},
            new GeneratedProperty { Name = "Selector", Type = "Expression", Completion="Expression" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ElementExpression",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "ElementExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Expression", Type = "Expression"},
            new GeneratedProperty { Name = "Selector", Type = "Expression", Completion="Syntax" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "PipeExpression",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "PipeExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Tabular"},
            new GeneratedProperty { Name = "Bar", Type = "SyntaxToken", Completion="Syntax"},
            new GeneratedProperty { Name = "Operator", Type = "QueryOperator", Completion="Query"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "RangeOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "RangeOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "RangeToken", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Name", Type = "NameDeclaration", Completion="Declaration" },
            new GeneratedProperty { Name = "FromToken", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "From", Type = "Expression", Completion="Scalar" },
            new GeneratedProperty { Name = "ToToken", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "To", Type = "Expression", Completion="Scalar"},
            new GeneratedProperty { Name = "StepToken", Type = "SyntaxToken", Completion="Keyword"}, 
            new GeneratedProperty { Name = "Step", Type = "Expression", Completion="Scalar"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "NamedParameter",
        Doc = "",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "NamedParameter",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Name", Type = "NameDeclaration", Completion="Declaration" },
            new GeneratedProperty { Name = "EqualToken", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="None" },
            new GeneratedProperty { Name = "ExpressionHint", Type="CompletionHint", DefaultValue="CompletionHint.None", IsSyntax=false }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ConsumeOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "ConsumeOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "ConsumeKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="None" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "CountOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "CountOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "CountKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "AsIdentifier", Type = "CountAsIdentifierClause", Optional=true, Completion="Clause" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "CountAsIdentifierClause",
        Doc = "",
        Base = "Clause",
        Sealed = true,
        Kind = "CountAsIdentifierClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "AsKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Identifier", Type = "SyntaxToken", Completion="Declaration" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ExecuteAndCacheOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "ExecuteAndCacheOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "ExecuteAndCacheKeyword", Type = "SyntaxToken" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ExtendOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "ExtendOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "ExtendKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Expressions", Type = "SyntaxList<SeparatedElement<Expression>>", Completion="Scalar" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "FacetOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "FacetOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "FacetKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "ByKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Expressions", Type = "SyntaxList<SeparatedElement<Expression>>", Completion="Scalar" },
            new GeneratedProperty { Name = "WithClause", Type = "FacetWithClause", Optional=true, Completion="Clause"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "FacetWithClause",
        Doc = "",
        Abstract = true,
        Base = "Clause",
        Properties = new GeneratedProperty[]
        {
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "FacetWithOperatorClause",
        Doc = "",
        Base = "FacetWithClause",
        Sealed = true,
        Kind = "FacetWithOperatorClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "WithKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Operator", Type = "QueryOperator", Completion="Query" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "FacetWithExpressionClause",
        Doc = "",
        Base = "FacetWithClause",
        Sealed = true,
        Kind = "FacetWithExpressionClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "WithKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Query" },
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Completion="Syntax" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "FilterOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "FilterOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Keyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="None" },
            new GeneratedProperty { Name = "Condition", Type = "Expression", Completion="Boolean" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "GetSchemaOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "GetSchemaOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "GetSchemaKeyword", Type = "SyntaxToken", Completion="Keyword" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "FindOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "FindOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "FindKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "DataScope", Type = "DataScopeClause", Optional=true, Completion="Clause" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="None" },
            new GeneratedProperty { Name = "InClause", Type = "FindInClause", Optional=true, Completion="Clause" },
            new GeneratedProperty { Name = "WhereKeyword", Type = "SyntaxToken", Optional=true, Completion="Keyword" },
            new GeneratedProperty { Name = "Condition", Type = "Expression", Completion="Boolean" },
            new GeneratedProperty { Name = "Project", Type = "FindProjectClause", Optional=true, Completion="Clause" },
            new GeneratedProperty { Name = "ProjectAway", Type = "FindProjectClause", Optional=true, Completion="Clause" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "DataScopeClause",
        Doc = "",
        Base = "Clause",
        Sealed = true,
        Kind = "DataScopeClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "DataScopeKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "EqualToken", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Value", Type = "SyntaxToken", Completion="Keyword"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "TypedColumnReference",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "TypedColumnReference",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Column", Type = "NameReference", Completion="Column" },
            new GeneratedProperty { Name = "ColonToken", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Type", Type = "TypeExpression", Completion="Syntax" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "FindInClause",
        Doc = "",
        Base = "Clause",
        Sealed = true,
        Kind = "FindInClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "InKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Expressions", Type = "SyntaxList<SeparatedElement<Expression>>", Completion="Tabular"},
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Completion="Syntax" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "FindProjectClause",
        Doc = "",
        Base = "Clause",
        Sealed = true,
        Kind = "FindProjectClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "ProjectKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Columns", Type = "SyntaxList<SeparatedElement<Expression>>", Completion="Scalar"},
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "PackExpression",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "PackExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "PackKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "AsteriskToken", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Completion="Syntax" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "NameAndTypeDeclaration",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "NameAndTypeDeclaration",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Name", Type = "NameDeclaration", Completion="Declaration" },
            new GeneratedProperty { Name = "Colon", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Type", Type = "TypeExpression", Completion="Syntax" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "TypeExpression",
        Doc = "",
        Base = "Expression",
        Abstract = true,
        Properties = new GeneratedProperty[]
        {
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "PrimitiveTypeExpression",
        Doc = "",
        Base = "TypeExpression",
        Sealed = true,
        Kind = "PrimitiveTypeExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Type", Type = "SyntaxToken", Completion="Keyword" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "SearchOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "SearchOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "SearchKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="None" },
            new GeneratedProperty { Name = "DataScope", Type = "DataScopeClause", Optional=true, Completion="Clause" },
            new GeneratedProperty { Name = "InClause", Type = "FindInClause", Optional=true, Completion="Clause" },
            new GeneratedProperty { Name = "Condition", Type = "Expression", Completion="Scalar" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ForkOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "ForkOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "ForkKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Expressions", Type = "SyntaxList<ForkExpression>", Completion="Tabular" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "NameEqualsClause",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "NameEqualsClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Name", Type = "NameDeclaration", Completion="Declaration" },
            new GeneratedProperty { Name = "EqualToken", Type = "SyntaxToken", Completion="Syntax" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ForkExpression",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "ForkExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "NameEquals", Type = "NameEqualsClause", Optional=true, Completion="Clause" },
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Clause" },
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Completion="Syntax" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "MakeSeriesOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "MakeSeriesOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "MakeSeriesKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="None" },
            new GeneratedProperty { Name = "Aggregates", Type = "SyntaxList<SeparatedElement<MakeSeriesExpression>>", Completion="Aggregate" },
            new GeneratedProperty { Name = "OnClause", Type = "MakeSeriesOnClause", Completion="Clause" },
            new GeneratedProperty { Name = "RangeClause", Type = "MakeSeriesRangeClause", Completion="Clause"},
            new GeneratedProperty { Name = "ByClause", Type = "MakeSeriesByClause", Optional=true, Completion="Clause" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "MakeSeriesExpression",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "MakeSeriesExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Scalar" },
            new GeneratedProperty { Name = "DefaultExpression", Type = "DefaultExpressionClause", Optional=true, Completion="Clause" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "DefaultExpressionClause",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "DefaultExpressionClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "DefaultKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "EqualToken", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Literal" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "MakeSeriesOnClause",
        Doc = "",
        Base = "Clause",
        Sealed = true,
        Kind = "MakeSeriesOnClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "OnKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Scalar" }
        }
    },

	new GeneratedCslNodeClass
    {
        Name = "MakeSeriesFromClause",
        Doc = "",
        Base = "Clause",
        Sealed = true,
        Kind = "MakeSeriesFromClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "FromKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Scalar" }
        }
    },

	new GeneratedCslNodeClass
    {
        Name = "MakeSeriesToClause",
        Doc = "",
        Base = "Clause",
        Sealed = true,
        Kind = "MakeSeriesToClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "ToKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Scalar" }
        }
    },

	new GeneratedCslNodeClass
    {
        Name = "MakeSeriesStepClause",
        Doc = "",
        Base = "Clause",
        Sealed = true,
        Kind = "MakeSeriesStepClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "StepKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Scalar" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "MakeSeriesRangeClause",
        Doc = "",
        Base = "Clause",
        Abstract = true,
        Properties = new GeneratedProperty[]
        {
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "MakeSeriesInRangeClause",
        Doc = "",
        Base = "MakeSeriesRangeClause",
        Sealed = true,
        Kind = "MakeSeriesInRangeClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "InKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "RangeKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Arguments", Type = "ExpressionList", Completion="Syntax" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "MakeSeriesFromToStepClause",
        Doc = "",
        Base = "MakeSeriesRangeClause",
        Sealed = true,
        Kind = "MakeSeriesFromToStepClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "MakeSeriesFromClause", Type = "MakeSeriesFromClause", Optional=true, Completion="Clause"},
            new GeneratedProperty { Name = "MakeSeriesToClause", Type = "MakeSeriesToClause", Optional=true, Completion="Clause"},
			new GeneratedProperty { Name = "MakeSeriesStepClause", Type = "MakeSeriesStepClause", Completion="Clause"}
        }
    },


    new GeneratedCslNodeClass
    {
        Name = "MakeSeriesByClause",
        Doc = "",
        Base = "Clause",
        Sealed = true,
        Kind = "MakeSeriesByClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "ByKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Expressions", Type = "SyntaxList<SeparatedElement<Expression>>", Completion="Scalar" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "MvExpandOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "MvExpandOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "MvExpandKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="None" },
            new GeneratedProperty { Name = "Expressions", Type = "SyntaxList<SeparatedElement<MvExpandExpression>>", Completion="Scalar"},
            new GeneratedProperty { Name = "RowLimitClause", Type = "MvExpandRowLimitClause", Optional=true, Completion="Clause"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "MvExpandExpression",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "MvExpandExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Expression", Type = "Expression", Optional=true, Completion="Scalar" },
            new GeneratedProperty { Name = "ToTypeOf", Type = "ToTypeOfClause", Optional=true, Completion="Clause" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "MvExpandRowLimitClause",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "MvExpandRowLimitClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "LimitKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "RowLimit", Type = "Expression", Completion="Scalar" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "MvApplyOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "MvApplyOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "MvApplyKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="None" },
            new GeneratedProperty { Name = "Expressions", Type = "SyntaxList<SeparatedElement<MvApplyExpression>>", Completion="Scalar"},
            new GeneratedProperty { Name = "RowLimitClause", Type = "MvApplyRowLimitClause", Optional=true, Completion="Clause"},
            new GeneratedProperty { Name = "ContextIdClause", Type = "MvApplyContextIdClause", Optional=true, Completion="Clause"},
            new GeneratedProperty { Name = "OnKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Subquery", Type="MvApplySubqueryExpression", Completion="Tabular" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "MvApplyExpression",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "MvApplyExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Expression", Type = "Expression", Optional=true, Completion="Scalar" },
            new GeneratedProperty { Name = "ToTypeOf", Type = "ToTypeOfClause", Optional=true, Completion="Clause" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "MvApplyRowLimitClause",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "MvApplyRowLimitClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "LimitKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "RowLimit", Type = "Expression", Completion="Scalar" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "MvApplyContextIdClause",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "MvApplyContextIdClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "IdKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Id", Type = "Expression", Completion="Scalar" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "MvApplySubqueryExpression",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "MvApplySubqueryExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Clause" },
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Completion="Syntax" }
        }
    },


    new GeneratedCslNodeClass
    {
        Name = "ToTypeOfClause",
        Doc = "",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "ToTypeOfClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "ToKeyword", Type = "SyntaxToken", Completion="Keyword"},
            new GeneratedProperty { Name = "TypeOf", Type = "TypeOfLiteralExpression", Completion="Keyword"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "EvaluateOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "EvaluateOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "EvaluateKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="None"},
            new GeneratedProperty { Name = "FunctionCall", Type = "FunctionCallExpression", Completion="Tabular"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ParseOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "ParseOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "ParseKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="None"},
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Scalar"},
            new GeneratedProperty { Name = "WithKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Patterns", Type = "SyntaxList<SyntaxNode>", Completion="Syntax"}
        }
    },

	 new GeneratedCslNodeClass
    {
        Name = "ParseWhereOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "ParseWhereOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "ParseKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="None"},
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Scalar"},
            new GeneratedProperty { Name = "WithKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Patterns", Type = "SyntaxList<SyntaxNode>", Completion="Syntax"}
        }
    },
    
    new GeneratedCslNodeClass
    {
        Name = "PartitionOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "PartitionOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "PartitionKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="None" },
            new GeneratedProperty { Name = "ByKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "ByExpression", Type = "Expression", Completion="Scalar" },
            new GeneratedProperty { Name = "Operand", Type = "PartitionOperand", Completion="Tabular" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "PartitionOperand",
        Base = "Expression",
        Abstract = true,
        Properties = new GeneratedProperty[]
        {
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "PartitionQuery",
        Base = "PartitionOperand",
        Sealed = true,
        Kind = "PartitionQuery",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "OpenBrace", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Query", Type = "Expression", Completion="Tabular" },
            new GeneratedProperty { Name = "CloseBrace", Type = "SyntaxToken", Completion="Syntax" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "PartitionScope",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "PartitionScope",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "InKeyword", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Scalar" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "PartitionSubquery",
        Base = "PartitionOperand",
        Sealed = true,
        Kind = "PartitionSubquery",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Scope", Type = "PartitionScope", Completion="Syntax", Optional=true },
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Subquery", Type = "Expression", Completion="Query" },
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Completion="Syntax" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ProjectOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "ProjectOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "ProjectKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Expressions", Type = "SyntaxList<SeparatedElement<Expression>>", Completion="Scalar"},
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ProjectAwayOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "ProjectAwayOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "ProjectAwayKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Expressions", Type = "SyntaxList<SeparatedElement<Expression>>", Completion="Scalar"},
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ProjectRenameOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "ProjectRenameOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "ProjectRenameKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Expressions", Type = "SyntaxList<SeparatedElement<Expression>>", Completion="Scalar"},
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ProjectReorderOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "ProjectReorderOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "ProjectReorderKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Expressions", Type = "SyntaxList<SeparatedElement<Expression>>", Completion="Scalar"},
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "SampleOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "SampleOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "SampleKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="None"},
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Number"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "SampleDistinctOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "SampleDistinctOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "SampleDistinctKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="None"},
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Number" },
            new GeneratedProperty { Name = "OfKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "OfExpression", Type = "Expression", Completion="Scalar"}
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ReduceByOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "ReduceByOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "ReduceKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="None"},
            new GeneratedProperty { Name = "ByKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Scalar" },
            new GeneratedProperty { Name = "With", Type = "ReduceByWithClause", Optional=true, Completion="Clause"},
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ReduceByWithClause",
        Doc = "",
        Base = "Clause",
        Sealed = true,
        Kind = "ReduceByWithClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "WithKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<SeparatedElement<NamedParameter>>", Completion="Syntax"},
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "SummarizeOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "SummarizeOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "SummarizeKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="None"},
            new GeneratedProperty { Name = "Aggregates", Type = "SyntaxList<SeparatedElement<Expression>>", Completion="Aggregate" },
            new GeneratedProperty { Name = "ByClause", Type = "SummarizeByClause", Optional=true, Completion="Clause" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "SummarizeByClause",
        Doc = "",
        Base = "Clause",
        Sealed = true,
        Kind = "SummarizeByClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "ByKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Expressions", Type = "SyntaxList<SeparatedElement<Expression>>", Completion="Scalar"},
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "DistinctOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "DistinctOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "DistinctKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="None"},
            new GeneratedProperty { Name = "Expressions", Type = "SyntaxList<SeparatedElement<Expression>>", Completion="Scalar" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "TakeOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "TakeOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Keyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="None" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Number" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "SortOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "SortOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Keyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "ByKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Expressions", Type = "SyntaxList<SeparatedElement<Expression>>", Completion="Scalar" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "OrderedExpression",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "OrderedExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Scalar" },
            new GeneratedProperty { Name = "Ordering", Type = "OrderingClause", Completion="Clause" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "OrderingClause",
        Doc = "",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "OrderingClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "AscOrDescKeyword", Type = "SyntaxToken", Optional=true, Completion="Keyword" },
            new GeneratedProperty { Name = "NullsClause", Type = "OrderingNullsClause", Optional=true, Completion="Clause" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "OrderingNullsClause",
        Doc = "",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "OrderingNullsClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "NullsKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "FirstOrLastKeyword", Type = "SyntaxToken", Completion="Keyword" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "TopHittersOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "TopHittersOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "TopHittersKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Number" },
            new GeneratedProperty { Name = "OfKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "OfExpression", Type = "Expression", Completion="Scalar" },
            new GeneratedProperty { Name = "ByClause", Type = "TopHittersByClause", Optional=true, Completion="Clause" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "TopHittersByClause",
        Doc = "",
        Base = "Clause",
        Sealed = true,
        Kind = "TopHittersByClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "ByKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Scalar" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "TopOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "TopOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "TopKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="None" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Number" },
            new GeneratedProperty { Name = "ByKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "ByExpression", Type = "Expression", Completion="Scalar" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "TopNestedOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "TopNestedOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Clauses", Type = "SyntaxList<SeparatedElement<TopNestedClause>>", Completion="Clause" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "TopNestedClause",
        Doc = "",
        Base = "Clause",
        Sealed = true,
        Kind = "TopNestedClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "TopNestedKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Optional=true, Completion="Number" },
            new GeneratedProperty { Name = "OfKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "OfExpression", Type = "Expression", Completion="Scalar" },
            new GeneratedProperty { Name = "WithOthersClause", Type = "TopNestedWithOthersClause", Optional=true, Completion="Clause" },
            new GeneratedProperty { Name = "ByKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "ByExpression", Type = "Expression", Completion="Scalar" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "TopNestedWithOthersClause",
        Doc = "",
        Base = "Clause",
        Sealed = true,
        Kind = "TopNestedWithOthersClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "WithKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "OthersKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Equal", Type="SyntaxToken", Completion="Syntax"},
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Scalar" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "UnionOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "UnionOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "UnionKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="None" },
            new GeneratedProperty { Name = "Expressions", Type = "SyntaxList<SeparatedElement<Expression>>", Completion="Tabular" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "AsOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "AsOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "AsKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="None" },
            new GeneratedProperty { Name = "Name", Type = "NameDeclaration", Completion="Declaration" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "SerializeOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "SerializeOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "SerializeKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="None" },
            new GeneratedProperty { Name = "Expressions", Type = "SyntaxList<SeparatedElement<Expression>>", Completion="Scalar" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "InvokeOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "InvokeOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "InvokeKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Function", Type = "Expression", Completion="TabularFunction" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "RenderOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "RenderOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "RenderKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "ChartType", Type = "SyntaxToken", Optional=true, Completion="Keyword" },
            new GeneratedProperty { Name = "WithClause", Type = "RenderWithClause", Optional=true, Completion="Clause" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "RenderNameList",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "RenderNameList",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Names", Type = "SyntaxList<SeparatedElement<NameReference>>" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "RenderWithClause",
        Doc = "",
        Base = "Clause",
        Sealed = true,
        Kind = "RenderWithClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "WithKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Properties", Type = "SyntaxList<SeparatedElement<NamedParameter>>", Completion="None"},
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Completion="Syntax" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "PrintOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "PrintOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "PrintKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Expressions", Type = "SyntaxList<SeparatedElement<Expression>>", Completion="Scalar" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "AliasStatement",
        Doc = "",
        Base = "Statement",
        Sealed = true,
        Kind = "AliasStatement",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "AliasKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "DatabaseKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Name", Type="NameDeclaration", Completion="Declaration" },
            new GeneratedProperty { Name = "Equal", Type="SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Expression", Type="Expression", Completion="Database" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "LetStatement",
        Doc = "",
        Base = "Statement",
        Sealed = true,
        Kind = "LetStatement",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "LetKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Name", Type = "NameDeclaration", Completion="Declaration" },
            new GeneratedProperty { Name = "Equal", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Expression" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "FunctionDeclaration",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "FunctionDeclaration",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "ViewKeyword", Type = "SyntaxToken", Optional=true, Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "FunctionParameters", Completion="Syntax" },
            new GeneratedProperty { Name = "Body", Type = "FunctionBody", Completion="Clause" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "FunctionParameters",
        Doc = "",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "FunctionParameters",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<SeparatedElement<FunctionParameter>>", Completion="Syntax" },
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Completion="Syntax" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "FunctionParameter",
        Doc = "",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "FunctionParameter",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "NameAndType", Type = "NameAndTypeDeclaration" },
            new GeneratedProperty { Name = "DefaultValue", Type = "DefaultValueDeclaration", Optional=true, Completion="Syntax" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "DefaultValueDeclaration",
        Doc = "",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "DefaultValueDeclaration",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Equal", Type = "SyntaxToken" },
            new GeneratedProperty { Name = "Value", Type = "Expression", Completion="Scalar" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "FunctionBody",
        Doc = "",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "FunctionBody",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "OpenBrace", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Statements", Type = "SyntaxList<SeparatedElement<Statement>>", Completion="Tabular" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Optional=true, Completion="Expression" },
            new GeneratedProperty { Name = "Semicolon", Type = "SyntaxToken", Optional=true, Completion="Syntax" },
            new GeneratedProperty { Name = "CloseBrace", Type = "SyntaxToken", Completion="Syntax" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "SchemaTypeExpression",
        Doc = "",
        Base = "TypeExpression",
        Sealed = true,
        Kind = "SchemaTypeExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Columns", Type = "SyntaxList<SeparatedElement<Expression>>", Completion="Declaration" },
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Completion="Syntax" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ExpressionStatement",
        Doc = "",
        Base = "Statement",
        Sealed = true,
        Kind = "ExpressionStatement",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Inherit" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "MaterializeExpression",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "MaterializeExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "MaterializeKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Tabular" },
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Completion="Syntax" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "SetOptionStatement",
        Doc = "",
        Base = "Statement",
        Sealed = true,
        Kind = "SetOptionStatement",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "SetKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Name", Type = "NameDeclaration", Completion="Declaration" },
            new GeneratedProperty { Name = "ValueClause", Type = "OptionValueClause", Optional=true, Completion="Clause" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "OptionValueClause",
        Doc = "",
        Base = "Clause",
        Sealed = true,
        Kind = "OptionValueClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Equal", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Scalar" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "QueryParametersStatement",
        Doc = "",
        Base = "Statement",
        Sealed = true,
        Kind = "QueryParametersStatement",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "DeclareKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "QueryParametersKeyword", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<SeparatedElement<FunctionParameter>>", Completion="Syntax" },
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Completion="Syntax" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "RestrictStatement",
        Doc = "",
        Base = "Statement",
        Sealed = true,
        Kind = "RestrictStatement",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "RestrictKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "AccessKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "ToKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Expressions", Type = "SyntaxList<SeparatedElement<Expression>>", Completion="Scalar" },
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Completion="Syntax" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "PatternStatement",
        Doc = "",
        Base = "Statement",
        Sealed = true,
        Kind = "PatternStatement",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "DeclareKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "PatternKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Name", Type = "NameDeclaration", Completion="Declaration" },
            new GeneratedProperty { Name = "Pattern", Type = "PatternDeclaration", Optional=true, Completion="Clause" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "PatternDeclaration",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "PatternDeclaration",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "EqualToken", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<SeparatedElement<NameAndTypeDeclaration>>", Completion="Syntax" },
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "PathParameter", Type = "PatternPathParameter", Optional=true, Completion="Clause" },
            new GeneratedProperty { Name = "OpenBrace", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Patterns", Type = "SyntaxList<PatternMatch>", Completion="Clause" },
            new GeneratedProperty { Name = "CloseBrace", Type = "SyntaxToken", Completion="Syntax" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "PatternPathParameter",
        Doc = "",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "PatternPathParameter",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "OpenBracket", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Parameter", Type = "NameAndTypeDeclaration", Completion="Syntax" },
            new GeneratedProperty { Name = "CloseBracket", Type = "SyntaxToken", Completion="Syntax" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "PatternMatch",
        Doc = "",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "PatternMatch",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "ParameterValues", Type = "ExpressionList", Completion="Syntax"},
            new GeneratedProperty { Name = "PathValue", Type = "PatternPathValue", Optional=true, Completion="Clause" },
            new GeneratedProperty { Name = "EqualToken", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Body", Type = "FunctionBody", Completion="Clause" },
            new GeneratedProperty { Name = "SemicolonToken", Type = "SyntaxToken", Completion="Syntax" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "PatternPathValue",
        Doc = "",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "PatternPathValue",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "DotToken", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "OpenBracket", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Value", Type = "Expression", Completion="Scalar" },
            new GeneratedProperty { Name = "CloseBracket", Type = "SyntaxToken", Completion="Syntax" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "DataScopeExpression",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "DataScopeExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Expression", Type = "Expression" },
            new GeneratedProperty { Name = "DataScopeClause", Type = "DataScopeClause", Completion="Clause" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "DataTableExpression",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "DataTableExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "DataTableKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="None" },
            new GeneratedProperty { Name = "Schema", Type = "SchemaTypeExpression", Completion="Syntax" },
            new GeneratedProperty { Name = "OpenBracket", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Values", Type = "SyntaxList<SeparatedElement<Expression>>", Completion="Literal" },
            new GeneratedProperty { Name = "CloseBracket", Type = "SyntaxToken", Completion="Syntax" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ExternalDataExpression",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "ExternalDataExpression",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "ExternalDataKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="None" },
            new GeneratedProperty { Name = "Schema", Type = "SchemaTypeExpression", Completion="Syntax" },
            new GeneratedProperty { Name = "OpenBracket", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "URIs", Type="SyntaxList<SeparatedElement<Expression>>", Completion="None" },
            new GeneratedProperty { Name = "CloseBracket", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "WithClause", Type = "ExternalDataWithClause", Optional=true, Completion="Clause" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ExternalDataWithClause",
        Doc = "",
        Base = "Expression",
        Sealed = true,
        Kind = "ExternalDataWithClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "WithKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Properties", Type="SyntaxList<SeparatedElement<NamedParameter>>" },
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Completion="Syntax" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "JoinOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "JoinOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "JoinKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="Syntax" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Tabular" },
            new GeneratedProperty { Name = "ConditionClause", Type = "JoinConditionClause", Optional=true, Completion="Clause" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "LookupOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "LookupOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "LookupKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="Syntax" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Tabular" },
            new GeneratedProperty { Name = "LookupClause", Type = "JoinConditionClause", Completion="Clause" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "JoinConditionClause",
        Doc = "",
        Abstract = true,
        Base = "Clause",
        Properties = new GeneratedProperty[]
        {
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "JoinOnClause",
        Doc = "",
        Base = "JoinConditionClause",
        Sealed = true,
        Kind = "JoinOnClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "OnKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Expressions", Type = "SyntaxList<SeparatedElement<Expression>>", Completion="Column" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "JoinWhereClause",
        Doc = "",
        Base = "JoinConditionClause",
        Sealed = true,
        Kind = "JoinWhereClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "WhereKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Boolean" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ScanOperator",
        Doc = "",
        Base = "QueryOperator",
        Sealed = true,
        Kind = "ScanOperator",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "ScanKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Parameters", Type = "SyntaxList<NamedParameter>", Completion="Syntax" },
            new GeneratedProperty { Name = "OrderByClause", Type = "ScanOrderByClause", Optional=true, Completion="Syntax" },
            new GeneratedProperty { Name = "PartitionByClause", Type = "ScanPartitionByClause", Optional=true, Completion="Syntax" },
            new GeneratedProperty { Name = "DeclareClause", Type = "ScanDeclareClause", Optional=true, Completion="Syntax" },
            new GeneratedProperty { Name = "WithKeyword", Type="SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "OpenParenToken", Type = "SyntaxToken", Optional=true, Completion="Syntax" },
            new GeneratedProperty { Name = "Steps", Type = "SyntaxList<ScanStep>", Completion="Syntax" },
            new GeneratedProperty { Name = "CloseParenToken", Type = "SyntaxToken", Optional=true, Completion="Syntax" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ScanDeclareClause",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "ScanDeclareClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "DeclareKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Declarations", Type = "SyntaxList<SeparatedElement<FunctionParameter>>", Completion="Syntax" },
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Completion="Syntax" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ScanOrderByClause",
        Doc = "",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "ScanOrderByClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "OrderKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "ByKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Expressions", Type = "SyntaxList<SeparatedElement<Expression>>", Completion="Scalar" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ScanPartitionByClause",
        Doc = "",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "ScanPartitionByClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "PartitionKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "ByKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Expressions", Type = "SyntaxList<SeparatedElement<Expression>>", Completion="Scalar" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ScanStep",
        Doc = "",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "ScanStep",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "StepKeyword", Type = "SyntaxToken", Completion="Keyword" },
            new GeneratedProperty { Name = "Name", Type = "NameDeclaration", Completion="Syntax" },
            new GeneratedProperty { Name = "OptionalKeyword", Type = "SyntaxToken", Optional=true, Completion="Keyword" },
            new GeneratedProperty { Name = "ColonToken", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Condition", Type="Expression", Completion="Scalar" },
            new GeneratedProperty { Name = "ComputationClause", Type="ScanComputationClause", Optional=true, Completion="Syntax" },
            new GeneratedProperty { Name = "SemicolonToken", Type = "SyntaxToken", Completion="Syntax" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ScanComputationClause",
        Doc = "",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "ScanComputationClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "ArrowToken", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Assignments", Type = "SyntaxList<SeparatedElement<ScanAssignment>>", Completion="Column" },
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "ScanAssignment",
        Doc = "",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "ScanAssignment",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Name", Type = "NameReference", Completion="Column" },
            new GeneratedProperty { Name = "EqualToken", Type = "SyntaxToken", Completion="Syntax" },
            new GeneratedProperty { Name = "Expression", Type = "Expression", Completion="Scalar" },
        }
    },

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //  Commands
    //

    new GeneratedCslNodeClass
    {
        Name = "CommandWithClause",
        Doc = "",
        Base = "Clause",
        Abstract = true,
        Properties = new GeneratedProperty[]
        {
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "CommandWithValueClause",
        Doc = "",
        Base = "CommandWithClause",
        Sealed = true,
        Kind = "CommandWithValueClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "WithKeyword", Type = "SyntaxToken", Completion="Keyword"},
            new GeneratedProperty { Name = "Value", Type = "Expression", Optional=true, Completion="Literal" }
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "CommandWithPropertyListClause",
        Doc = "",
        Base = "CommandWithClause",
        Sealed = true,
        Kind = "CommandWithPropertyListClause",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "WithKeyword", Type = "SyntaxToken", Completion="Keyword"},
            new GeneratedProperty { Name = "OpenParen", Type = "SyntaxToken", Completion="Keyword"},
            new GeneratedProperty { Name = "Properties", Type = "SyntaxList<SeparatedElement<NamedParameter>>", Completion="Scalar" },
            new GeneratedProperty { Name = "CloseParen", Type = "SyntaxToken", Completion="Keyword"},
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "Command",
        Doc = "",
        Base = "Expression",
        Abstract = true,
        Properties = new GeneratedProperty[]
        {
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "UnknownCommand",
        Doc = "",
        Base = "Command",
        Sealed = true,
        Kind = "UnknownCommand",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "DotToken", Type = "SyntaxToken", Completion="Syntax"},
            new GeneratedProperty { Name = "Parts", Type = "SyntaxList<SyntaxToken>", Completion="Syntax"},
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "CustomCommand",
        Doc = "",
        Base = "Command",
        Sealed = true,
        Kind = "CustomCommand",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "CommandKind", Type = "string", IsSyntax=false },
            new GeneratedProperty { Name = "DotToken", Type = "SyntaxToken", Completion="Syntax"},
            new GeneratedProperty { Name = "Custom", Type = "SyntaxElement", Completion="Syntax"},
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "BadCommand",
        Doc = "",
        Base = "Command",
        Sealed = true,
        Kind = "BadCommand",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "DotToken", Type = "SyntaxToken", Completion="Syntax"},
        }
    },

    new GeneratedCslNodeClass
    {
        Name = "CommandBlock",
        Doc = "",
        Base = "SyntaxNode",
        Sealed = true,
        Kind = "CommandBlock",
        Properties = new GeneratedProperty[]
        {
            new GeneratedProperty { Name = "Statements", Type = "SyntaxList<SeparatedElement<Statement>>", Completion="Tabular"},
            new GeneratedProperty { Name = "SkippedTokens", Type="SkippedTokens", Optional=true, Completion="None"},
            new GeneratedProperty { Name = "EndOfCommand", Type="SyntaxToken", Optional=true, Completion="None"},
        }
    }
};

CslTreeGeneratorKnownType[] CslTreeKnownTypes = new CslTreeGeneratorKnownType[]
{
};
#>
